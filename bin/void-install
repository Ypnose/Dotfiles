#!/bin/sh
# Script by Ypnose - http://ywstd.fr
set -e

VO_OSDISK="$1"
VO_OSPART="$2"
VO_HOSTNA="$3"
VO_CHROOT="syschroot"
VO_REPURL="http://alpha.de.repo.voidlinux.org/current"
VO_OSUEFI="1"
VO_OSLUKS="1"
# With UEFI, we assume ESP is the first partition
VO_SYSESP="${VO_OSDISK}1"
# With UEFI and LUKS, we assume /boot is the second partition
VO_OSBOOT="${VO_OSDISK}2"

##############################

p_err() {
	printf "%s\n" "$1" >&2
	exit 1
}

if [ "$#" -ne 3 ] || [ "$1" = "-h" ]; then
	printf "usage: %s [DISK] [OS] [HOSTNAME]\n" "${0##*/}"
	exit
fi

if [ ! -x "$(command -v xbps-install)" ]; then
	p_err "xbps-install not found"
fi

# Verify destination filesystem is mounted
if [ ! -d "$VO_CHROOT" ]; then
	p_err "$VO_CHROOT directory is missing"
elif ! mount | grep -q "^${VO_OSPART}"; then
	p_err "$VO_OSPART is not mounted inside $VO_CHROOT"
fi

# Verify we booted in EFI
if [ "$VO_OSUEFI" = "1" ] && [ ! -d /sys/firmware/efi/ ]; then
	p_err "The system has not booted in EFI mode"
fi

if [ "$(id -u)" -ne 0 ]; then
	p_err "${0##*/} needs to be called as root"
fi

# Launch the xbps sauce
xbps-install -S -R "$VO_REPURL" -r "$VO_CHROOT" base-files ncurses \
	coreutils findutils diffutils libgcc dash bash grep gzip file sed \
	gawk less util-linux tar man-pages mdocml shadow e2fsprogs psmisc \
	procps-ng tzdata pciutils iana-etc kbd iproute2 xbps nvi kmod eudev \
	runit-void

# /etc/fstab
printf "%s\n\n%s\n" \
	"# /etc/fstab" \
	"tmpfs /tmp tmpfs nodev,nosuid 0 0" >"${VO_CHROOT}/etc/fstab"
# Boot partitions
if [ "$VO_OSUEFI" = "1" ]; then
	if [ "$VO_OSLUKS" = "1" ]; then
		printf "UUID=%s /boot ext4 defaults,rw,errors=remount-ro 0 2\n" \
		"$(lsblk -no UUID "$VO_OSBOOT")" >>"${VO_CHROOT}/etc/fstab"
	fi
	printf "UUID=%s /boot/efi vfat umask=0077 0 2\n" \
		"$(lsblk -no UUID "$VO_SYSESP")" >>"${VO_CHROOT}/etc/fstab"
fi
# Other partitions
VO_OSUUID="$(lsblk -no UUID "$VO_OSPART")"
cat >>"${VO_CHROOT}/etc/fstab" <<-EOF
	#UUID=SWAP        none swap defaults 0 0
	UUID=${VO_OSUUID} / ext4 defaults,rw,errors=remount-ro 0 1
EOF

# hostname + /etc/hosts
printf "%s\n" "$VO_HOSTNA" >"${VO_CHROOT}/etc/hostname"
cat >"${VO_CHROOT}/etc/hosts" <<-EOF
	# /etc/hosts

	127.0.0.1     localhost
	127.0.1.1     $VO_HOSTNA

	# IPv6
	#::1          ip6-localhost ip6-loopback
	#fe00::0      ip6-localnet
	#ff00::0      ip6-mcastprefix
EOF

# HISTFILE
printf "\n%s\n" "unset HISTFILE" >>"${VO_CHROOT}/etc/profile"

# rc.conf
sed -i -e '/HARDWARECLOCK/s/^#//g' \
	-e 's|^#\?TIMEZONE=.*|TIMEZONE="Europe/Paris"|g' \
	-e 's|^#\?KEYMAP=.*|KEYMAP="uk"|g' \
	"${VO_CHROOT}/etc/rc.conf"

# IPv6
mkdir -p "${VO_CHROOT}/etc/sysctl.d"
cat >"${VO_CHROOT}/etc/sysctl.d/yp.conf" <<-EOF
	# /etc/sysctl.d/yp.conf

	# Disable IPv6
	net.ipv6.conf.all.disable_ipv6 = 1
	net.ipv6.conf.default.disable_ipv6 = 1
	net.ipv6.conf.lo.disable_ipv6 = 1

	# IPv6 Privacy Extensions
	#net.ipv6.conf.all.use_tempaddr = 2
	#net.ipv6.conf.default.use_tempaddr = 2
	#net.ipv6.conf.eth0.use_tempaddr = 2
	#net.ipv6.conf.eth1.use_tempaddr = 2
	#net.ipv6.conf.wlan0.use_tempaddr = 2
EOF

##############################

# Prepare the chroot...
if [ -f "/etc/resolv.conf" ]; then
	cp "/etc/resolv.conf" "${VO_CHROOT}/etc"
fi

mount -t proc proc "${VO_CHROOT}/proc"
mount -t sysfs sys "${VO_CHROOT}/sys"
mount -o bind /dev "${VO_CHROOT}/dev"
mount -o bind /dev/pts "${VO_CHROOT}/dev/pts"
if [ "$VO_OSUEFI" = "1" ]; then
	if [ "$VO_OSLUKS" = "1" ]; then
		mount "$VO_OSBOOT" "${VO_CHROOT}/boot"
	fi
	mkdir -p "${VO_CHROOT}/boot/efi"
	mount "$VO_SYSESP" "${VO_CHROOT}/boot/efi"
fi

# Run commands inside the chroot
chroot "${VO_CHROOT}" /bin/sh -l <<-EOF
	LC_ALL=C
	export LC_ALL

	xbps-alternatives -g sh -s dash
EOF

printf "%s\n" "Do not forget to change root password!"

# Go inside and do your business...
chroot "${VO_CHROOT}" /bin/sh -l

##############################

sync
if [ "$VO_OSUEFI" = "1" ]; then
	umount "${VO_CHROOT}/boot/efi"
	if [ "$VO_OSLUKS" = "1" ]; then
		umount "${VO_CHROOT}/boot"
	fi
fi
umount "${VO_CHROOT}/dev/pts" "${VO_CHROOT}/dev" "${VO_CHROOT}/sys" "${VO_CHROOT}/proc"
printf "%s\n" "DONE"

exit
